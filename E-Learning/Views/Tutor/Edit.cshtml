@model E_Learning.Models.TutorDetails

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm("Edit", "Tutor", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <h4>TutorDetails</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)

    <div class="form-group">
        @Html.LabelFor(model => model.Fname, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Fname, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Fname, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Lname, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Lname, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Lname, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PhoneNo, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.PhoneNo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PhoneNo, "", new { @class = "text-danger" })
        </div>
    </div>
    
    <div class="form-group">
        @Html.LabelFor(model => model.Imageurl, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @{
                if (Model.Imageurl != null)
                {
                    <p>Uploaded Image</p>
                    var base64 = Convert.ToBase64String(Model.Imageurl);
                    var imgsrc = string.Format("data:image/jpeg;base64,{0}", base64);
                    <img src='@imgsrc' height=100 width=150 class="img-fluid" id="showimg" name="showimg" alt="Responsive image" />
                }

                <div id="wrapper" style="margin-top: 20px;">

                    <div id="image-holder"></div>
                    <div class="input-group mb-3">
                        <div class="custom-file">

                            @*<input type="file" name="ImageData" id="ImageData" onchange="fileCheck(this);" class="custom-file-input" />*@
                            <input id="fileUpload" name="ImageData" class="custom-file-input " accept="Image/Jpeg" type="file" />
                            <label class="custom-file-label" for="inputGroupFile02">Choose file</label>
                        </div>
                        @Html.ValidationMessageFor(model => model.Imageurl, "", new { @class = "text-danger" })
                    </div>
                </div>

            }


        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>
    $(document).ready(function () {
         $('input[type="file"]').change(function (e) {
            var fileName = e.target.files[0].name;
            $('.custom-file-label').html(fileName);
        });


            $("#fileUpload").on('change', function () {
                //Get count of selected files
                var countFiles = $(this)[0].files.length;
                var imgPath = $(this)[0].value;
                var extn = imgPath.substring(imgPath.lastIndexOf('.') + 1).toLowerCase();
                var image_holder = $("#image-holder");
                image_holder.empty();
                if (extn == "gif" || extn == "png" || extn == "jpg" || extn == "jpeg") {
                    if (typeof (FileReader) != "undefined") {
                        //loop for each file selected for uploaded.
                        for (var i = 0; i < countFiles; i++) {
                            var reader = new FileReader();

                            reader.onload = function (e) {
                                $("<img  />", {
                                    "src": e.target.result,
                                    "class": "thumb-image"
                                }).appendTo(image_holder).width(150).height(178).class("img-thumbnail");
                            }

                            image_holder.show();
                            reader.readAsDataURL($(this)[0].files[i]);
                            //$('#showimg').hide();
                        }
                    } else {
                        alert("This browser does not support FileReader.");
                    }
                } else {
                    alert("Pls select only images");
                }
            });
        });
</script>
}
